"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import os
from logging.handlers import RotatingFileHandler
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ovc9%f161n0p4*g5(@51)@8h71$s^h#h1p5(imlb#%71oo1l@w"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
if DEBUG:
    INTERNAL_IPS = [
                "192.168.1.4",
                "127.0.0.1",
                    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "markdownify.apps.MarkdownifyConfig",
    "social_django",
    "mainapp",
    "authapp",  # для пользователей настрйока
    "crispy_forms",
    "crispy_bootstrap4",
    "selfadminapp",
    "debug_toolbar"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "mainapp.middleware.RemoveOldLanguageCookieMiddleware"
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "templates"
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "mainapp.context_processors.example.simple_context_processor",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",

            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ru-RU"
LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Russian')
]

TIME_ZONE = "Europe/Moscow"
DATE_FORMAT = (('d-m-Y'))
DATE_INPUT_FORMATS = (('%d-%m-%Y'),)
DATETIME_FORMAT = (('d-m-Y H:i'))
DATETIME_INPUT_FORMATS = (('%d-%m-%Y %H:%i'),)
USE_I18N = True

USE_L10N = True

USE_TZ = True
LANGUAGE_COOKIE_NAME = 'django_language'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# для пользователей настройки
AUTH_USER_MODEL = "authapp.CustomUser"
AUTHENTICATION_BACKENDS = ['social_core.backends.github.GithubOAuth2',
                           'django.contrib.auth.backends.ModelBackend']
SOCIAL_AUTH_GITHUB_KEY = 'Ov23liDvgASSGjmbaadg'
SOCIAL_AUTH_GITHUB_SECRET = '5615cd73382b0767e777cb833115501257b4c589'

LOGIN_REDIRECT_URL = "mainapp_namespace:main_page"
LOGOUT_REDIRECT_URL = "mainapp_namespace:main_page"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"
CRISPY_TEMPLATE_PACK = "bootstrap4"
LOG_FILE = BASE_DIR / "var" / "log" / "main_log.log"
LOGGING = {"version": 1,
           "disable_existing_loggers": False,
           "formatters": {
               "console": {
                   "format": "[%(asctime)s] %(levelname)s %(name)s (%(lineno)d) %(message)s"},
           },
           "handlers": {
               "file": {
                   "level": "DEBUG",
                   "class": "logging.handlers.RotatingFileHandler",
                   "filename": LOG_FILE,
                   'maxBytes': 1024 * 10, #10 кб
                   'backupCount': 3,
                   "formatter": "console",
               },
               "console": {"class": "logging.StreamHandler", "formatter": "console"}, },
           "loggers": {
               "django": {"level": "INFO", "handlers": ["console"]},
               "mainapp": {
                   "level": "DEBUG",
                   "handlers": ["file"],
               }
           },
           }

CACHES = {
    "default":{
        'BACKEND': "django_redis.cache.RedisCache",
        'LOCATION': "redis://127.0.0.1:6379",
        "OPTIONS": {
            'CLIENT_CLASS': "django_redis.client.DefaultClient",
        }
    }
}
# Настройки Celery (redis)
# CELERY_BROKER_URL = "redis://localhost:6379"
# CELERY_RESULT_BACKEND = "redis://localhost:6379"
# Настройки Celery (rabbitmq)
CELERY_BROKER_URL = 'amqp://localhost'  # RabbitMQ работает по протоколу AMQP
CELERY_ACCEPT_CONTENT = ['json']  # Формат данных
CELERY_TASK_SERIALIZER = 'json'  # Формат сериализации задач
# CELERY_RESULT_BACKEND = 'amqp://localhost:6379'  # Используем backend через RabbitMQ
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'



# Чтобы прицепить RabbitMQ в качестве брокера сообщений
# 1. Установить rabbitmq
# 2. Запустить rabbitmq (на macos brew services start rabbitmq)
# 3. проверить, корректно ли он работает. Ввести в браузере http://localhost:15672. Если выходит интерфейс - значит все ок
# 4. Запустить отладочный сервак через IDE(не через терминал)
# 5. Через терминал запустить celery (celery -A config worker --loglevel=info)
# 6. Отправить сообщение



# Read about sending email:
# https://docs.djangoproject.com/en/3.2/topics/email/
# Full list of email settings:
# https://docs.djangoproject.com/en/3.2/ref/settings/#email
# EMAIL_HOST = "localhost"
# EMAIL_PORT = "25"
# For debugging: python -m smtpd -n -c DebuggingServer localhost:25
# EMAIL_HOST_USER = "django@geekshop.local"

# EMAIL_HOST_PASSWORD = "geekshop"

# EMAIL_USE_SSL = False

# If server support TLS:
# EMAIL_USE_TLS = True

# Email as files for debug
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"

EMAIL_FILE_PATH = "var/email-messages/"

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your_password'
# DEFAULT_FROM_EMAIL = 'your_email@gmail.com'
#Интернационализация
LOCALE_PATHS = [BASE_DIR / 'locale']


